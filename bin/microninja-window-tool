#!/usr/bin/env python

# kano-window-tool
#
# Copyright (C) 2013, 2014 Kano Computing Ltd.
# License: GNU General Public License v2 http://www.gnu.org/licenses/gpl-2.0.txt
#
# A tool used to manipulate window properties
# Call kano-window-tool --help for detailed options
#
# Copyright (C) 2016 Alfabook srl
# License: GNU General Public License v2 http://www.gnu.org/licenses/gpl-2.0.txt
# rebadged with microninja

import sys
import re

from argparse import ArgumentParser
from microninja.window import gdk_window_settings, find_window

BOTTOM_BAR_HEIGHT = 39


def parse_args():
    app_desc = "A tool for manipulating window parameters and properties."
    parser = ArgumentParser(add_help=False, description=app_desc)

    parser.add_argument("--help", action="help",
                        help="show this message and exit")

    id_group = parser.add_mutually_exclusive_group(required=True)
    id_group.add_argument("-p", "--pid",
                          help="process id as an identifier of the window")
    id_group.add_argument("-t", "--title",
                          help="window title as an identifier of the window")
    id_group.add_argument("-i", "--id",
                          help="wm id as an identifier of the window")

    parser.add_argument("-w", "--width", type=float, metavar="W",
                        help="set specific width")
    parser.add_argument("-h", "--height", type=float, metavar="H",
                        help="set specific height")
    parser.add_argument("-x", "--x-pos", metavar="X", type=float,
                        help="set X position of the window")
    parser.add_argument("-y", "--y-pos", metavar="Y", type=float,
                        help="set Y position of the window")

    mode_group = parser.add_mutually_exclusive_group()
    mode_group.add_argument("-c", "--centered", action="store_true",
                            help="launch the window centered")
    mode_group.add_argument("-m", "--maximized", action="store_true",
                            help="launch the window maximized")

    parser.add_argument("-d", "--decoration", metavar="yes|no",
                        help="enable/disable window decoration")
    parser.add_argument("-f", "--focus", action="store_true",
                        help="set keyboard focus to the window")

    args = parser.parse_args()
    if hasattr(args, "decoration"):
        if re.match(r"[Yy]([Ee][Ss])?", args.decoration):
            args.decoration = True
        else:
            args.decoration = False

    return args


def main():
    args = parse_args()

    win = find_window(args.title, args.pid, args.id)
    if not win:
        sys.stderr.write("No window found from the information you provided.\n")
        return 1

    if args.focus:
        win.raise_()
        win.focus()

    # Do all the resizing at once
    gdk_window_settings(win, args.x_pos, args.y_pos, args.width, args.height,
                        args.decoration, args.maximized, args.centered)

    return 0

if __name__ == "__main__":
    sys.exit(main())
