#!/bin/bash

# Busybox udhcpc dispatcher script. Copyright (C) 2009 by Axel Beckert.
#
# Based on the busybox example scripts and the old udhcp source
# package default.* scripts.

# kano.script
#
# Copyright (C) 2014, 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# This script is called by the udhcpc daemon, when it prepares and releases DHCP leases
#

# Copyright (C) 2016 Alfabook srl
# Rebadged with microninja
# removed call_hook

RESOLV_CONF="/etc/resolv.conf"

. /usr/share/microninja-toolset/logging.sh

# Hook script to be called when network DHCP events occur
# network_hook="/usr/bin/kano-network-hook"

# Config files in kano-settings
SERVER_CONFIG='/usr/bin/start-sentry-server'

#function call_hook {

    # The network hook script is called when UDHCP events "bound" and "renew" arrive.
    # If bound or renew, the IP address of the lease will be given through the second parameter
    # The script will run as the superuser and started in the background, the return code is meaningless.

#    if [ -x $network_hook ]; then
#        $network_hook $@ &
#    fi
#}

case $1 in
    bound|renew)
        [ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"
        [ -n "$subnet" ] && NETMASK="netmask $subnet"

        /sbin/ifconfig $interface $ip $BROADCAST $NETMASK

        if [ -n "$router" ]; then
            echo "$0: Resetting default routes"
            while /sbin/route del default gw 0.0.0.0 dev $interface; do :; done

            metric=0
            for i in $router; do
                /sbin/route add default gw $i dev $interface metric $metric
                metric=$(($metric + 1))
            done
        fi

        # Update resolver configuration file
        R=""
        [ -n "$domain" ] && R="domain $domain
"
        for i in $dns; do
            echo "$0: Adding DNS $i"
            R="${R}nameserver $i
"
        done

        # Check whether the ultimate parental control should be switched on
        # TODO: move this to kano-settings

        # First check that server config file exists.
        if [ -x $SERVER_CONFIG ]; then

            # Run the script that switches on the parental control if the config is set
            # Will return 1 if it doesn't launch the server
            logger_info "The sentry server script $SERVER_CONFIG exists"
            $SERVER_CONFIG
            server_rv=$?
            logger_info "Run script $SERVER_CONFIG, return value is $server_rv"
            parental_control_on=$server_rv
        else
            # The ultimate parental control was not turned on
            logger_info "The sentry server script $SERVER_CONFIG does not exist"
            parental_control_on=1
        fi

        # If the parental control was not switched on, go through the other options
        if [ $parental_control_on -eq 1 ]; then
            logger_info "Ultimate parental control is NOT switched on"
            if [ -x /sbin/resolvconf ]; then
                echo -n "$R" | resolvconf -a "${interface}.udhcpc"
            else
                echo -n "$R" > "$RESOLV_CONF"

                # Add a fallback DNS server to the end of the list, including a new line
                echo "nameserver 8.8.8.8" >> "$RESOLV_CONF"
            fi
        else
            logger_info "Ultimate parental control IS switched on"
        fi

        # find the local timezone based on the IP address, then set local system
        if [ ! -L /etc/localtime ]; then
            tzupdated=`/usr/bin/microninja-tzupdate 2>&1`
            if [ "$?" -eq 0 ]; then
                logger_info "tzupdate SUCCESS: $tzupdated"
                logger_info "tzupdate result: $(file /etc/localtime)"
            else
                IFS=$'\n'
                for line in ${tzupdated}; do
                    logger_error "tzupdate FAIL: $line"
                done
            fi
        else
            logger_info "skipping tzupdate"
        fi

        # Set the system time from a network server, retry if it fails.
        for dateretries in 1 2 3 4 5
        do
            time_server=`cat /etc/timeserver.conf`
            logger_info "rdate using ntp server: $time_server"
            dated=`/usr/bin/rdate -4 -u -v -c -n $time_server 2>&1`
            if [ "$?" -eq 0 ]; then
                logger_info "rdate SUCCESS: $dated"
                break
            else
                IFS=$'\n'
                for line in ${dated}; do
                    logger_error "rdate FAIL: $line"
                done
                sleep 1
            fi
        done

        #call_hook $1 $ip
        ;;

    deconfig)
        if [ -x /sbin/resolvconf ]; then
            resolvconf -d "${interface}.udhcpc"
        fi
        /sbin/ifconfig $interface 0.0.0.0
        ;;

    leasefail)
        echo "$0: Lease failed: $message"
        ;;

    nak)
        echo "$0: Received a NAK: $message"
        ;;

    *)
        echo "$0: Unknown udhcpc command: $1";
        exit 1;
        ;;
esac
